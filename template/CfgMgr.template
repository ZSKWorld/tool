/**The script is automatically generated by BatMain.bat , please do not modify */
import { ResPath } from "../common/ResPath";

export class CfgManager {
#vars#
    constructor() {
		let cfgData = Laya.loader.getRes(ResPath.ConfigPath.Config);
		if (cfgData) {
			const keyMap = cfgData.keyMap;
			delete cfgData.keyMap;
			for (const cfgKey in cfgData) {
				const data = cfgData[ cfgKey ];
				Object.keys(data).forEach(dataKey => this.decodeData(data[ dataKey ], keyMap));
				this.cfgExtension(data);
				this[ cfgKey ] = data;
			}
			Laya.loader.clearRes(ResPath.ConfigPath.Config);
		}
	}

	private decodeData(data: any, keyMap: any): void {
		if (data == null) return;
		if (typeof data != "object") return;
		const isArray = Array.isArray(data);
		Object.keys(data).forEach((key) => {
			const temp = data[ key ];
			const type = temp?.constructor?.name;
			if (type == "Object")
				this.decodeData(temp, keyMap);
			else if (type == "Array")
				temp.forEach((v: any) => this.decodeData(v, keyMap));
			if (isArray) data[ key ] = temp;
			else {
				data[ keyMap[ key ] ] = temp;
				delete data[ key ];
			}
		});
	}

	private cfgExtension(cfg: ICfgExtension<any>): void {
		cfg[ "$data" ] = Object.values(cfg);
		cfg.forEach = function (callbackfn: (value: any, index: number, array: any[]) => void) {
			this.$data.forEach(callbackfn);
		};
		cfg.filter = function (predicate: (value: any, index: number, array: any[]) => unknown) {
			return this.$data.filter(predicate);
		};
		cfg.find = function (predicate: (value: any, index: number, obj: any[]) => unknown) {
			return this.$data.find(predicate);
		};
	}
}