/**The script is automatically generated by BatMain.bat , please do not modify */

type CfgMapData<T> = ReadonlyAll<{ [P in keyof T]: T[P] }[keyof T]>;
interface CfgExtension<T> {
	forEach(callbackfn: (value: CfgMapData<T>, index: number, array: CfgMapData<T>[]) => void, thisArg?: any): void;
	filter(predicate: (value: CfgMapData<T>, index: number, array: CfgMapData<T>[]) => boolean, thisArg?: any): CfgMapData<T>[];
	find(predicate: (value: CfgMapData<T>, index: number, array: CfgMapData<T>[]) => boolean, thisArg?: any): CfgMapData<T>;
	every(predicate: (value: CfgMapData<T>, index: number, array: CfgMapData<T>[]) => boolean, thisArg?: any): boolean;
	findIndex(predicate: (value: CfgMapData<T>, index: number, obj: CfgMapData<T>[]) => boolean, thisArg?: any): number;
	includes(searchElement: CfgMapData<T>, fromIndex?: number): boolean;
	indexOf(searchElement: CfgMapData<T>, fromIndex?: number): number;
	lastIndexOf(searchElement: CfgMapData<T>, fromIndex?: number): number;
	map<U>(callbackfn: (value: CfgMapData<T>, index: number, array: CfgMapData<T>[]) => U, thisArg?: any): U[];
	reduce<U>(callbackfn: (previousValue: U, currentValue: CfgMapData<T>, currentIndex: number, array: CfgMapData<T>[]) => U, initialValue: U): U;
	slice(start?: number, end?: number): CfgMapData<T>[];
	some(predicate: (value: CfgMapData<T>, index: number, array: CfgMapData<T>[]) => boolean, thisArg?: any): boolean;
}
type CfgData<T> = ReadonlyAll<T> & CfgExtension<T> & { [key: string]: CfgMapData<T> };

declare interface ICfgManager {
#vars#
}